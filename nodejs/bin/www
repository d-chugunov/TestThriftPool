#!/usr/bin/env node

var thrift = require('thrift'),
    Calculator = require('./gen-nodejs/Calculator'),
    Types = require('./gen-nodejs/calculator_types'),
    thriftPool = require('node-thrift-pool');

var params = {
    //transport : thrift.TBufferedTransport,
    transport : thrift.TFramedTransport,
    protocol : thrift.TBinaryProtocol,
    timeout : 500
};

var thrift_client = thriftPool(thrift, Calculator, {host: "localhost", port: 9090}, params);

function make_ping() {
    console.log(new Date() + ": making ping...");
    thrift_client.ping(
        function (err, response) {
            console.log("err = " + err);
            console.log("response = " + response);
        }
    );
}

setInterval(make_ping, 1000);

//
///**
// * Module dependencies.
// */
//
//var app = require('../app');
//var debug = require('debug')('nodejs:server');
//var http = require('http');
//
///**
// * Get port from environment and store in Express.
// */
//
//var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);
//
///**
// * Create HTTP server.
// */
//
//var server = http.createServer(app);
//
///**
// * Listen on provided port, on all network interfaces.
// */
//
//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);
//
///**
// * Normalize a port into a number, string, or false.
// */
//
//function normalizePort(val) {
//  var port = parseInt(val, 10);
//
//  if (isNaN(port)) {
//    // named pipe
//    return val;
//  }
//
//  if (port >= 0) {
//    // port number
//    return port;
//  }
//
//  return false;
//}
//
///**
// * Event listener for HTTP server "error" event.
// */
//
//function onError(error) {
//  if (error.syscall !== 'listen') {
//    throw error;
//  }
//
//  var bind = typeof port === 'string'
//    ? 'Pipe ' + port
//    : 'Port ' + port;
//
//  // handle specific listen errors with friendly messages
//  switch (error.code) {
//    case 'EACCES':
//      console.error(bind + ' requires elevated privileges');
//      process.exit(1);
//      break;
//    case 'EADDRINUSE':
//      console.error(bind + ' is already in use');
//      process.exit(1);
//      break;
//    default:
//      throw error;
//  }
//}
//
///**
// * Event listener for HTTP server "listening" event.
// */
//
//function onListening() {
//  var addr = server.address();
//  var bind = typeof addr === 'string'
//    ? 'pipe ' + addr
//    : 'port ' + addr.port;
//  debug('Listening on ' + bind);
//}
